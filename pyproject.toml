[project]
name = "multi-agent-patterns"
version = "1.0.0"
description = "Multi-Agent Patterns: A Practical Guide"
authors = [
    {name = "Jag Reehal", email = "jag@jagreehal.com"},
]

requires-python = ">=3.12"
readme = "README.md"
license = {file = "LICENSE"}

dependencies = [
    "logfire>=3.6.4",
    "pydantic>=2.0.0,<3.0.0",
    "pydantic-ai>=0.0.31",
    "pydantic-graph>=0.0.31",
    "python-dotenv>=1.0.1",
]

[project.optional-dependencies]
dev = [
    "bandit>=1.8.0",
    "ruff>=0.6.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.0.0",
    "mypy>=1.5.0",
    "uv>=0.2.0",
    "ipykernel>=6.0.0",
    "watchdog>=6.0.0",
]
logging = [
    "loguru>=0.5.0,<1.0.0"
]
debug = [
    "icecream>=2.1.3"
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.ruff]
line-length = 120
target-version = "py312"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "N",  # flake8-broken-line
]
ignore = [
    "E501",  # line too long, handled by ruff formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "F401",  # module imported but unused
]

[tool.ruff.lint.isort]
known-first-party = ["multi-agent-patterns"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = [
    "src",
]

[tool.mypy]
plugins = ["pydantic.mypy"]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
strict_optional = true
check_untyped_defs = true
disallow_any_unimported = true
disallow_any_generics = true
disallow_incomplete_defs = true
no_implicit_optional = true
show_error_codes = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

